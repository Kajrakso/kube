.TH kube

.SH NAME
kube \- an optimal solver for the 3x3x3 Rubik's cube

.SH SYNOPSIS
.B kube
[\fB\-n\fR \fINUM\fR]
[\fB\-v\fR]
[\fB\-f\fR \fIFORMAT\fR]
[\fB\-g\fR]

.SH DESCRIPTION
.B kube
is an optimal solver for the 3x3x3 Rubik's cube.
It finds a shortest solution to the given scramble
in the half turn metric (HTM). The solving
algorithm is heavily inspired by Tomas Rokicki's 
nxopt solver.
.BR
kube reads scrambles from stdin on the format
specified by \fIFORMAT\fR. 

.SH OPTIONS
.TP
.BR \-n\fR\ \fINUM\fR
kube searches for \fINUM\fR solutions. Default is 1.
.TP
.BR \-v
Verbose output. kube will print some stats about the solving process.
.TP
.BR \-f\fR\ \fIFORMAT\fR
Specify scramble format. Default is "singmaster".
Use standard notation for moves. Ex.: "R U R' F B2".
Another option is "speffz". Specify the memo
needed to solve the cube blindfolded using 
the Speffz letter scheme from buffers UFR/UF. 
Corner memo first, then a ".", followed by edge memo.
Ex.: "abuv.efnt".
.TP
.BR \-g
Generate tables. This has to be done before 
using the solver.
.TP

.SH EXAMPLES
.PP
Find an optimal solution for the Ua-perm with verbose output
.PP
.nf
.RS
.B
echo "R' U R' U' R' U' R' U R U R2" | kube -v
.RE
.fi
.PP
Output:
.PP
.nf
.RS
\fB
Depth: 0 1 2 3 4 5 6 7 8 9

Some statistics:
max depth: 9
sols found: 1

nodes visited: 2026
nodes pruned: 1697 (83.76%)
nodes pruned inv: 531 (26.21%)
inverse computations: 824 (40.67%)
nisses: 50 (2.47%)

B2 U' R L' B2 L R' U' B2 (9)
\fR
.RE
.fi

.PP
Find an optimal solution for an A-perm:
.PP
.nf
.RS
.B
echo "ab." | kube -f speffz
.RE
.fi
.PP
Output:
.PP
.nf
.RS
\fB
R' F R' B2 R F' R' B2 R2
\fR

.SH AUTHORS
Oskar Feed Jakobsen (kube@oskarfj.no)

.SH SOURCE CODE
Source code is available at \fIhttps://github.com/kajrakso/kube\fP
